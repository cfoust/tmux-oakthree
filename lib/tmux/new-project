#!/usr/bin/env bash
#
# Create a new project given a path.

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$SCRIPT_DIR"/../oakthree.sh

if [ -z "$1" ]; then
  exit
fi

directory="$1"
window_name=$(basename "$directory")
shell_name="$window_name$OT_SHELL_SUFFIX"

# Save the full path so we can quickly jump to this project
short_name=${window_name:0:1}
echo "$directory" > "$OT_CACHE/$short_name"

# Probably have to refine this at some point. If the user tries to start a
# project in a directory with a basename identical to another project, the old
# project's windows are removed. Might want to add some method for allowing
# that in the future, but it's not high-priority right now.
_tmux remove-window "$OT_PROJECTS:$window_name"
_tmux remove-window "$OT_PROJECTS:$shell_name"

_tmux push-history "$OT_PROJECTS-$window_name"

REPEATER="$BIN_DIR/repeater"

shift 1

PRIMARY="$REPEATER $*"

# Default to using the editor
if [[ "$#" -eq 0 ]]; then
  PRIMARY="$REPEATER $EDITOR"
fi

SECONDARY="$REPEATER $SHELL"

# Allow the user to automatically center projects by setting @ot-auto-center to true.
if [ "$(_tmux getv 'auto-center')" == "true" ]; then
  _tmux switch-client -t "$OT_PROJECTS" \; \
    set-hook -g after-new-window "run-shell 'bash $SCRIPT_DIR/tmux/center'" \; \
    new-window            \
    -c "$directory"     \
    -n "$shell_name"    \
    "$SECONDARY"  \;\
    new-window            \
    -c "$directory"     \
    -n "$window_name"   \
    "$PRIMARY" \;\
    set-hook -gu after-new-window
else
  _tmux switch-client -t "$OT_PROJECTS" \; \
    new-window            \
    -c "$directory"     \
    -n "$shell_name"    \
    "$SECONDARY"  \;\
    new-window            \
    -c "$directory"     \
    -n "$window_name"   \
    "$PRIMARY"
fi
